//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cabinet.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CabinetEntities : DbContext
    {
        public CabinetEntities()
            : base("name=CabinetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Interventie> Interventie { get; set; }
        public virtual DbSet<Pacient> Pacient { get; set; }
        public virtual DbSet<Pret> Pret { get; set; }
        public virtual DbSet<Programare> Programare { get; set; }
        public virtual DbSet<Utilizator> Utilizator { get; set; }
        public virtual DbSet<ProgramInter> ProgramInter { get; set; }
    
        public virtual int DeleteInterventie(Nullable<int> idInterventie, Nullable<bool> isDeleted)
        {
            var idInterventieParameter = idInterventie.HasValue ?
                new ObjectParameter("idInterventie", idInterventie) :
                new ObjectParameter("idInterventie", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInterventie", idInterventieParameter, isDeletedParameter);
        }
    
        public virtual int DeletePacient(Nullable<int> idPacient, Nullable<bool> idDeleted)
        {
            var idPacientParameter = idPacient.HasValue ?
                new ObjectParameter("idPacient", idPacient) :
                new ObjectParameter("idPacient", typeof(int));
    
            var idDeletedParameter = idDeleted.HasValue ?
                new ObjectParameter("idDeleted", idDeleted) :
                new ObjectParameter("idDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePacient", idPacientParameter, idDeletedParameter);
        }
    
        public virtual int DeletePret(Nullable<int> idPret, Nullable<bool> isDeleted)
        {
            var idPretParameter = idPret.HasValue ?
                new ObjectParameter("idPret", idPret) :
                new ObjectParameter("idPret", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePret", idPretParameter, isDeletedParameter);
        }
    
        public virtual int DeleteProgramare(Nullable<int> idProgramare, Nullable<int> idPacient, Nullable<bool> isDeleted)
        {
            var idProgramareParameter = idProgramare.HasValue ?
                new ObjectParameter("idProgramare", idProgramare) :
                new ObjectParameter("idProgramare", typeof(int));
    
            var idPacientParameter = idPacient.HasValue ?
                new ObjectParameter("idPacient", idPacient) :
                new ObjectParameter("idPacient", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProgramare", idProgramareParameter, idPacientParameter, isDeletedParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> idUtilizator)
        {
            var idUtilizatorParameter = idUtilizator.HasValue ?
                new ObjectParameter("idUtilizator", idUtilizator) :
                new ObjectParameter("idUtilizator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", idUtilizatorParameter);
        }
    
        public virtual ObjectResult<GetAllInterventii_Result> GetAllInterventii()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInterventii_Result>("GetAllInterventii");
        }
    
        public virtual ObjectResult<GetAllPacienti_Result> GetAllPacienti(Nullable<int> idUtilizator)
        {
            var idUtilizatorParameter = idUtilizator.HasValue ?
                new ObjectParameter("idUtilizator", idUtilizator) :
                new ObjectParameter("idUtilizator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPacienti_Result>("GetAllPacienti", idUtilizatorParameter);
        }
    
        public virtual ObjectResult<GetAllPret_Result> GetAllPret()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPret_Result>("GetAllPret");
        }
    
        public virtual ObjectResult<GetAllProgramari_Result> GetAllProgramari()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProgramari_Result>("GetAllProgramari");
        }
    
        public virtual ObjectResult<GetAllUsers_Result> GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsers_Result>("GetAllUsers");
        }
    
        public virtual int InsertInterventie(string tip)
        {
            var tipParameter = tip != null ?
                new ObjectParameter("tip", tip) :
                new ObjectParameter("tip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInterventie", tipParameter);
        }
    
        public virtual int InsertPacient(Nullable<int> idUtilizator, string nume, string prenume, string cnp)
        {
            var idUtilizatorParameter = idUtilizator.HasValue ?
                new ObjectParameter("idUtilizator", idUtilizator) :
                new ObjectParameter("idUtilizator", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var prenumeParameter = prenume != null ?
                new ObjectParameter("prenume", prenume) :
                new ObjectParameter("prenume", typeof(string));
    
            var cnpParameter = cnp != null ?
                new ObjectParameter("cnp", cnp) :
                new ObjectParameter("cnp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPacient", idUtilizatorParameter, numeParameter, prenumeParameter, cnpParameter);
        }
    
        public virtual int InsertPret(Nullable<int> idInterventie, Nullable<System.DateTime> dataInceput, Nullable<System.DateTime> dataSfarsit, Nullable<decimal> pret)
        {
            var idInterventieParameter = idInterventie.HasValue ?
                new ObjectParameter("idInterventie", idInterventie) :
                new ObjectParameter("idInterventie", typeof(int));
    
            var dataInceputParameter = dataInceput.HasValue ?
                new ObjectParameter("dataInceput", dataInceput) :
                new ObjectParameter("dataInceput", typeof(System.DateTime));
    
            var dataSfarsitParameter = dataSfarsit.HasValue ?
                new ObjectParameter("dataSfarsit", dataSfarsit) :
                new ObjectParameter("dataSfarsit", typeof(System.DateTime));
    
            var pretParameter = pret.HasValue ?
                new ObjectParameter("pret", pret) :
                new ObjectParameter("pret", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPret", idInterventieParameter, dataInceputParameter, dataSfarsitParameter, pretParameter);
        }
    
        public virtual int InsertProgramare(Nullable<int> idPacient, Nullable<System.DateTime> dataProgramare, Nullable<bool> isDeleted)
        {
            var idPacientParameter = idPacient.HasValue ?
                new ObjectParameter("idPacient", idPacient) :
                new ObjectParameter("idPacient", typeof(int));
    
            var dataProgramareParameter = dataProgramare.HasValue ?
                new ObjectParameter("dataProgramare", dataProgramare) :
                new ObjectParameter("dataProgramare", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProgramare", idPacientParameter, dataProgramareParameter, isDeletedParameter);
        }
    
        public virtual int InsertUser(string nume, string parola, Nullable<bool> isMedic, Nullable<bool> isDeleted)
        {
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("parola", parola) :
                new ObjectParameter("parola", typeof(string));
    
            var isMedicParameter = isMedic.HasValue ?
                new ObjectParameter("isMedic", isMedic) :
                new ObjectParameter("isMedic", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", numeParameter, parolaParameter, isMedicParameter, isDeletedParameter);
        }
    
        public virtual int UpdateInterventie(Nullable<int> idInterventie, string tip)
        {
            var idInterventieParameter = idInterventie.HasValue ?
                new ObjectParameter("idInterventie", idInterventie) :
                new ObjectParameter("idInterventie", typeof(int));
    
            var tipParameter = tip != null ?
                new ObjectParameter("tip", tip) :
                new ObjectParameter("tip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateInterventie", idInterventieParameter, tipParameter);
        }
    
        public virtual int UpdatePacient(Nullable<int> idPacient, string nume, string prenume, string cnp)
        {
            var idPacientParameter = idPacient.HasValue ?
                new ObjectParameter("idPacient", idPacient) :
                new ObjectParameter("idPacient", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var prenumeParameter = prenume != null ?
                new ObjectParameter("prenume", prenume) :
                new ObjectParameter("prenume", typeof(string));
    
            var cnpParameter = cnp != null ?
                new ObjectParameter("cnp", cnp) :
                new ObjectParameter("cnp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePacient", idPacientParameter, numeParameter, prenumeParameter, cnpParameter);
        }
    
        public virtual int UpdatePret(Nullable<int> idPret, Nullable<int> idInterventie, Nullable<System.DateTime> dataInceput, Nullable<System.DateTime> dataSfarsit, Nullable<decimal> pret)
        {
            var idPretParameter = idPret.HasValue ?
                new ObjectParameter("idPret", idPret) :
                new ObjectParameter("idPret", typeof(int));
    
            var idInterventieParameter = idInterventie.HasValue ?
                new ObjectParameter("idInterventie", idInterventie) :
                new ObjectParameter("idInterventie", typeof(int));
    
            var dataInceputParameter = dataInceput.HasValue ?
                new ObjectParameter("dataInceput", dataInceput) :
                new ObjectParameter("dataInceput", typeof(System.DateTime));
    
            var dataSfarsitParameter = dataSfarsit.HasValue ?
                new ObjectParameter("dataSfarsit", dataSfarsit) :
                new ObjectParameter("dataSfarsit", typeof(System.DateTime));
    
            var pretParameter = pret.HasValue ?
                new ObjectParameter("pret", pret) :
                new ObjectParameter("pret", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePret", idPretParameter, idInterventieParameter, dataInceputParameter, dataSfarsitParameter, pretParameter);
        }
    
        public virtual int UpdateProgramare(Nullable<int> idProgramare, Nullable<int> idPacient, Nullable<System.DateTime> dataProgramare)
        {
            var idProgramareParameter = idProgramare.HasValue ?
                new ObjectParameter("idProgramare", idProgramare) :
                new ObjectParameter("idProgramare", typeof(int));
    
            var idPacientParameter = idPacient.HasValue ?
                new ObjectParameter("idPacient", idPacient) :
                new ObjectParameter("idPacient", typeof(int));
    
            var dataProgramareParameter = dataProgramare.HasValue ?
                new ObjectParameter("dataProgramare", dataProgramare) :
                new ObjectParameter("dataProgramare", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProgramare", idProgramareParameter, idPacientParameter, dataProgramareParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> idUtilizator, string nume, string parola, Nullable<bool> isMedic)
        {
            var idUtilizatorParameter = idUtilizator.HasValue ?
                new ObjectParameter("idUtilizator", idUtilizator) :
                new ObjectParameter("idUtilizator", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("parola", parola) :
                new ObjectParameter("parola", typeof(string));
    
            var isMedicParameter = isMedic.HasValue ?
                new ObjectParameter("isMedic", isMedic) :
                new ObjectParameter("isMedic", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", idUtilizatorParameter, numeParameter, parolaParameter, isMedicParameter);
        }
    }
}
